<style>

  .frame-chat {
    min-height: 50vh;
  }
  
  .frame-box {
    height: 30em;
    overflow-y: scroll;
  }
  
  </style>

<div id='app' class="columns is-multiline is-centered">

  <!-- Room -->
  <div class="column is-3-desktop is-12-mobile">

    <button v-if="logout" @click="closeSession" class="button is-info">Cerrar sesión</button>
    <div class="card frame-chat">
      <div class="card-content">
        <h2 class="tag is-success is-size-4 has-text-weight-bold">Salas</h2>

        <hr>
        <button class="button is-info is-medium" @click="isModalActive=true">Crear Sala</button>
        <hr>
        <div class="media" v-for='(chat,index) of chats' :key="`chat_${index}`">
          <div class="media-left">
            <figure class="image is-48x48">
              <img class="is-rounded" :src="chat.image" alt="image">
            </figure>
        </div>


          <div class="media-content">
            <a class="title is-4" @click="selectChat(chat.id)">{{ chat.name }}</a>
            <br/>
            <p class="subtitle is-6">{{ chat.created_at }}</p>
            <button class="button is-small is-danger" @click="deleteRoom(chat.id)">delete</button>
          </div>


        </div>
      </div>
    </div>
  </div>

  <!--Chats-->

  <div class="column is-9-desktop is-12-mobile">
    <div class="card frame-chat">
      <div class="card-content">
        <h2 class="tag is-success is-size-4 has-text-weight-bold">Salas</h2>

        <hr>

         <!--Caja de comentarios -->

        <div id="chat-app" class="frame-box" v-if="currentChatId !== undefined">
            <!-- Comentarios -->
            <div v-for='(message, index) of messages' :key='`message-${index}`'>
                <span class="tag is-medium" :class="{ 'is-pulled-right' : (message.user_id == user_id), 
                'is-pulled-right' : (message.user_id != user_id), 'is-info' : (message.user_id == user_id), 
                'is-success' : (message.user_id != user_id) }">
                {{ message.text }}
              </span>
                <br>
                <br>
            </div>
        </div>
        <div v-else>
            <p class="is-size-3 has-text-info">Selecciona una Sala para iniciar</p>
        </div>

         <div class="field has-addons" v-if="currentChatId !== undefined">
          <div class="control is-expanded">
            <input v-model='text' class="input" type="text" placeholder="Escribe aqui" @keydown.enter='sendMessage'>
          </div>
          <div class="control">
            <button class="button is-info" @click='sendMessage'>
              Enviar
            </a>
          </div>
         </div>

      </div>
    </div>
  </div>

  <div class="modal" :class="{ 'is-active': isModalActive }">
    <div class="modal-background" @click="isModalActive = false"></div>
    <div class="modal-content">
        <div class="card">
          <div class="card-content">
            <form @submit.prevent="createRoom">
                <div class="field">
                  <label class="label">Nombre</label>
                  <div class="control">
                    <input v-model='name' class="input" type="text" placeholder="Nombre interesante">
                  </div>
                </div>
                <div class="field">
                  <label class="label">Descripción</label>
                  <div class="control">
                    <input v-model='description' class="input" type="text" placeholder="Descripción interesante">
                  </div>
                </div>

                <div class='field'>
                  <label class="label">Temática</label>
                  <div class="control">
                    <div class="select">
                      <select v-model='topic'>

                          <option value="">Selecciona una temática</option>
                          <option value="random">random</option>
                          <option value="magic">magic</option>
                          <option value="code">code</option>
                          <option value="games">games</option>

                      </select>
                    </div>
                  </div>
                </div>
                <div class='field'>
                  <div class="control">
                  <button class="button is-info">Crear Sala</button>
                  </div>
                </div>
            </form>
          </div>
        </div>
    </div>
    <button class="modal-close is-large" aria-label="close" @click="isModalActive = false"></button>
  </div>

</div>
<script src="/dependencies/sails.io.js"></script>
<script>

  const config = {
    headers: { Authorization: "Bearer " + localStorage.getItem('token')}
  }

  const vue = new Vue({
    el: '#app',
    data: function () {

      return {
        //tools modales
        isModalActive: false,
        //Informacion chat
        currentChatId: undefined,

        logout: false,
        //CRUD Room
        name: '',
        description: '',
        image: '',
        topic: '', //      isIn: ['random','magic','games','code']
        room_id: '',



        //Chat
        //datos
        user_id: 0,
        text: '',
        chats: [

        ],
        messages: [
          //{ text: 'Hola mundo!', user_id:1 },
          //{ text: 'Hola mundo 1!', user_id:0 },
          //{ text: 'Hola mundo 2!', user_id:0 },
        ]
      }

    },
    //esta funcion se carga una vez cuando la vista se carga
    created () {
      this.authValidation()
      this.fetch()
      this.user_id = new Date().getTime() + ''
      //let interval = setInterval(this.poolingChat, 1000)
      this.setSocket()
    },
    methods: {
      authValidation () {
        let token = localStorage.getItem('token')
        if (!token) {
          windows.location = '/'
        }else {
          axios.get('/auth/check', config)
          .then((res) => {
            if (res.status != 200) {
              window.location = '/'
            }
            this.logout = true
          })
        }

      },
      closeSession () {
        localStorage.removeItem('token')
        windows.location = '/'
      },

      selectChat (chat_id) {
        this.currentChatId = chat_id
        this.getChat()
        console.log(this.currentChatId)
      },
      setSocket () {
          let _ = this
          //configuracion de socket
          io.socket.on('message', (data) => {
            console.log(data, 'socket')
            if (data.room == this.currentChatId) {
              _.getChat()
            }
          })
      },
      /*poolingChat () {
        console.log('pulse <3')
        if (this.currentChatId !== undefined){
          axios.get(`/rooms/${this.currentChatId}/messages`)
          .then((result) => {
//            console.log(result.data)
            this.messages = result.data

          }).catch(err => {
            console.log(err)
          })
        }
      },*/
      getChat () {
        console.log('pulse <3')
        if (this.currentChatId !== undefined){
          axios.get(`/rooms/${this.currentChatId}/messages`, config)
          .then((result) => {
//            console.log(result.data)
            this.messages = result.data
            
            // alinear el scroll de aplicacion
            let element = document.getElementById('chat-app')
            setTimeout(() => {
              element.scrollTop = element.scrollHeight
            }, 300)
            

          }).catch(err => {
            console.log(err)
          })
        }
      },
      //methods
      fetch () {
        console.log('He sido creado')
        axios.get('/rooms', config)
          .then((response) => {
          // handle success
            this.chats = response.data.map(chat => ({
                id: chat.id,
                name: chat.name,
                image: chat.information.pop().image >0 ? chat.information.pop().image : 'none.jpg',
                created_at: chat.createdAt
              
            }))
          })
          .catch(function (error) {
          // handle error
            console.log(error);
          })
      },
      sendMessage () {
        /*this.messages.push( 
          { text: this.text, user_id: this.user_id }
        )*/

        if (this.currentChatId === undefined) {
          alert('Seleccione un Chat')
          return
        }

        let dataRoom = {
          text: this.text,
          user_id: this.user_id
        }
        axios.post(`/rooms/${this.currentChatId}/messages`, dataRoom, config)
        .then((res) => {
          console.log('Elemento creado')
          this.text = ''
        })
        .catch((err) => {
          console.log(err)
        })

        
      },
      deleteRoom (id) {
        let a = confirm('Borrar')
        if (a) {
          axios.delete(`/rooms/${id}`, config)
          .then(() => {
            this.fetch()
            alert('sala eliminada')
          })
        }
      },
      createRoom () {
        alert(this.name)
        //Crear sala
        let dataRoom = {
          name: this.name
        }
        console.log(dataRoom)
        axios.post('/rooms', dataRoom)
           .then((res) => {
             console.log(res, 'resultado de creacion')
            let room_id = res.data.id
            //crear informacion
            let dataInfo = {
                  description: this.description,
                  image: this.image,
                  topic: this.topic
                  
                }
                axios.post(`/rooms/${room_id}/informations`, dataInfo, config)
                  .then(() => {
                    //crear informacion
                    alert('se ha creado')
                    this.isModalActive = false
                    this.fetch()
                  })
                  .catch((err) => {
                    console.log(err)
                  })




           })
           .catch((err) => {
             console.log(err)
           })
        
        
      }

    }
  })

</script>

